# -*- coding: utf-8 -*-
"""G4_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uRzHKqTqTKpdOAqLcjgJL5edhvhRDDvC

# Replication 1 - Code

Here we solve the FWL model and do the graphics
"""

import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import statsmodels.formula.api as smf

# Cargar datos
file = "https://raw.githubusercontent.com/CausalAIBook/MetricsMLNotebooks/main/data/wage2015_subsample_inference.csv"
data = pd.read_csv(file)
data = data[(data['scl'] == 1) | (data['clg'] == 1) | (data['ad'] == 1)]

"""##ITEM 1

Model without controls

Here we are going to see how big is the impact of being woman in the log wage.
Is the impact of woman because 1 is woman, so at the end, we see the effect of that

Log(Y)=b1*sex+e
"""

nocontrol_model = smf.ols(formula='lwage~sex',data=data)
b1_est = nocontrol_model.fit().summary2().tables[1]['Coef.']['sex']
b1_se = nocontrol_model.fit().summary2().tables[1]['Std.Err.']['sex']
print("the beta estimated is", b1_est)

"""Controlling by scl, clg, ad, experience and so on, we have a new model.

Now, we are going to estimated the impact of sex in log wage, but controlling by education
level and the experience

Log(Y)=a1*sex+B'x+ey
"""

modelo = 'lwage ~ sex + (exp1 + exp2 + exp3 + exp4)*(shs + hsg + scl + clg + ad + occ2 + ind2 + mw + so + we)'
control_model = smf.ols(formula=modelo, data=data)
a1_est = control_model.fit().summary2().tables[1]['Coef.']['sex']
a1_se = control_model.fit().summary2().tables[1]['Std.Err.']['sex']
print("the beta estimated, controlling by education and experience, is", a1_est)

"""Partialling out"""

modelo_y = 'lwage ~ (exp1 + exp2 + exp3 + exp4)*(shs + hsg + scl + clg + ad + occ2 + ind2 + mw + so + we)'
modelo_sex = 'sex ~ (exp1 + exp2 + exp3 + exp4)*(shs + hsg + scl + clg + ad + occ2 + ind2 + mw + so + we)'
error_y = smf.ols(formula=modelo_y, data=data).fit().resid
error_sex = smf.ols(formula=modelo_sex, data=data).fit().resid
partial_model = sm.OLS(error_y, error_sex).fit()
c1_est = partial_model.params[0]
c1_se = partial_model.bse[0]
print("the beta estimated, partialling out, is", c1_est)
print("Standard error:", c1_se)

"""Table of the betas and se"""

table = np.zeros((3, 2))
table[0,0] = b1_est
table[0, 1] = b1_se
table[1, 0] = a1_est
table[1, 1] = a1_se
table[2, 0] = c1_est
table[2, 1] = c1_se
colnames = ["Estimate", "Std. Error"]
rownames = ["Without controls", "full reg", "partial reg"]
df = pd.DataFrame(table, columns=colnames, index=rownames)
df

"""# ITEM 2
Gr√°ficos

##Histogram-Wage

Wage per hour is under 100 dollars
"""

plt.figure(figsize=(8, 6))
sns.histplot(data['wage'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Salary')
plt.ylabel('Frequency')
plt.title('Distribution of Salary')
plt.show()

"""##Histogram-Lwage"""

plt.figure(figsize=(8, 6))
sns.histplot(data['lwage'], bins=20, color='lightgreen', edgecolor='black')
plt.xlabel('Log(Salary)')
plt.ylabel('Frequency')
plt.title('Distribution of Log(Salary)')
plt.show()

"""##Pie-sex

Sex distribution-most of the sample are men, but in a little proportion
"""

plt.figure(figsize=(6, 6))
data['sex'].value_counts().plot(kind='pie', autopct='%1.1f%%', colors=['skyblue', 'pink'])
plt.xlabel('')
plt.ylabel('')
plt.title('Distribution of Gender')
plt.legend(labels=['Male', 'Female'], loc='upper right')
plt.show()

"""##Bar chart-education

In the sample, the biggest goup is on collage
"""

education_counts = data[['scl', 'clg', 'ad']].melt(var_name='Education', value_name='Count')
plt.figure(figsize=(8, 6))
sns.barplot(x='Education', y='Count', data=education_counts, palette='viridis')
plt.xlabel('Education Level')
plt.ylabel('Count')
plt.title('Distribution of Education Levels')
plt.xticks(rotation=45, ha='right')
plt.show()

"""##Scatter plot-exp1-wage"""

plt.figure(figsize=(8, 6))
sns.scatterplot(x='exp1', y='wage', hue='sex', data=data, palette=['blue', 'red'])
plt.xlabel('Experience')
plt.ylabel('Salary')
plt.title('Scatterplot of Experience1 vs Salary')
plt.show()

"""## Scatter plot-exp1-lwage"""

plt.figure(figsize=(8, 6))
sns.scatterplot(x='exp1', y='lwage', hue='sex', data=data, palette=['blue', 'red'])
plt.xlabel('Experience')
plt.ylabel('Log(Salary)')
plt.title('Scatterplot of Experience1 vs Log(Salary)')
plt.show()

"""# ITEM 3

##Confidence interval
"""

conf_intervals = pd.DataFrame({
    'Model': ['Without Controls', 'Full Regression', 'Partial Regression'],
    'Coef': [b1_est, a1_est, c1_est],
    'Lower': [b1_est - 1.96 * b1_se, a1_est - 1.96 * a1_se, c1_est - 1.96 * c1_se],
    'Upper': [b1_est + 1.96 * b1_se, a1_est + 1.96 * a1_se, c1_est + 1.96 * c1_se]
})
print(conf_intervals)

"""##Graph"""

plt.figure(figsize=(8, 6))
sns.pointplot(x='Model', y='Coef', data=conf_intervals, color='red')
plt.errorbar(x=conf_intervals['Model'], y=conf_intervals['Coef'], yerr=[conf_intervals['Coef'] - conf_intervals['Lower'], conf_intervals['Upper'] - conf_intervals['Coef']], fmt='none', color='blue')
plt.xlabel('Model')
plt.ylabel('Coefficient of sex')
plt.title("Confidence Interval of sex's Coefficient")
plt.xticks(rotation=45, ha='right')
plt.show()

"""# ITEM 4"""

# Filter clg==1
college_data = data[data['clg'] == 1]

# Graph femenine
female_college_data = college_data[college_data['sex'] == 1]
plt.figure()
plt.plot(female_college_data['exp2'], female_college_data['lwage'], color='red', label='Actual', linewidth=2)
plt.plot(female_college_data['exp2'], smf.ols(formula='lwage ~ exp2', data=female_college_data).fit().fittedvalues, color='blue', linestyle='dashed', label='Predicted', linewidth=1)
plt.title('Female College-educated Workers')
plt.xlabel('Experience')
plt.ylabel('Log(Salary)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Graph masculine
male_college_data = college_data[college_data['sex'] == 0]
plt.figure()
plt.plot(male_college_data['exp2'], male_college_data['lwage'], color='green', label='Actual', linewidth=2)
plt.plot(male_college_data['exp2'], smf.ols(formula='lwage ~ exp2', data=male_college_data).fit().fittedvalues, color='orange', linestyle='dashed', label='Predicted', linewidth=1)
plt.title('Male College-educated Workers')
plt.xlabel('Experience')
plt.ylabel('Log(Salary)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()